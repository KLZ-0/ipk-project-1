#!/usr/bin/env python3

import socket
import argparse
import sys
import ipaddress

PROT_PREFIX = "fsp://"
SOCKET_TIMEOUT = 3

CHUNKSIZE = 2048
AGENT = "xkalaz00"


class FileGet:
    # Initialized in reparseArgs
    arg_ns = None
    arg_url = None

    def run(self):
        self.reparse_args()

        target = self.resolve_server_ip(self.arg_url["server"], self.arg_ns)

        self.download_structure(target, self.arg_url["file"], self.arg_url["server"])

    def reparse_args(self):
        """
        Transforms the parsed args to usable format
        arg_ns -> tuple(IP : str, PORT : int)
        arg_url -> dict{"server" : str, "file" : str}
        :return:
        """

        # NAMESERVER
        ns = getattr(self, "raw_arg_ns").split(":", 1)
        if len(ns) != 2:
            sys.exit("Error: NAMESERVER must be in the format 'IP:PORT'.")

        try:
            ipaddress.ip_address(ns[0])
        except ValueError:
            sys.exit("Error: NAMESERVER IP is invalid.")

        # convert port to int
        try:
            ns[1] = int(ns[1])
        except ValueError:
            sys.exit("Error: NAMESERVER port must be an integer.")

        self.arg_ns = tuple(ns)

        # SURL
        url = getattr(self, "raw_arg_url")
        if not url.startswith(PROT_PREFIX):
            sys.exit(f"Error: SURL must start with '{PROT_PREFIX}'.")

        url = url[len(PROT_PREFIX):].split("/", 1)
        if len(url) != 2:
            sys.exit("Error: SURL must be in the format 'fsp://SERVER/FILE'.")

        self.arg_url = {"server": url[0], "file": url[1]}

    @staticmethod
    def ask_for_file(sock: socket.socket, msg: str):
        total = 0
        while total < len(msg):
            try:
                n = sock.send(msg[total:].encode())
            except socket.error as e:
                sys.exit(f"Error (FILESERVER - send): {e}")

            if n == 0:
                sys.exit("Error (FILESERVER) - socket connection broken.")
            total = total + n

    @classmethod
    def receive_length(cls, sock: socket.socket):
        status_response = cls.receive_header_line(sock).split(" ", 1)
        if status_response[0] != "FSP/1.0":
            sys.exit(f"Error (FILESERVER): Invalid FSP version: {status_response[0]}.")
        if status_response[1] != "Success":
            sys.exit(f"Error (FILESERVER): Server response: {status_response[1]}.")

        len_response = cls.receive_header_line(sock).split(":", 1)
        if len_response[0].strip() != "Length":
            sys.exit(f"Error (FILESERVER): Invalid response header - missing 'Length'.")

        try:
            length = int(len_response[1].strip())
        except ValueError:
            sys.exit(f"Error (FILESERVER): Invalid response header - Length is not a valid integer.")

        # clear newline
        try:
            sock.recv(2)
        except socket.timeout:
            sys.exit(f"Error (FILESERVER - receive newline): Timeout of {SOCKET_TIMEOUT} seconds exceeded.")
        except socket.error as e:
            sys.exit(f"Error (FILESERVER - receive newline): {e}")

        return length

    @staticmethod
    def receive_content(sock: socket.socket, length: int):
        chunks = []
        total = 0

        try:
            while total < length:
                chunk = sock.recv(min(length - total, CHUNKSIZE))
                if chunk == b'':
                    sys.exit(f"Error (FILESERVER - receive): Connection broken")
                chunks.append(chunk)
                total = total + len(chunk)
        except socket.timeout:
            sys.exit(f"Error (FILESERVER - receive): Timeout of {SOCKET_TIMEOUT} seconds exceeded.")
        except socket.error as e:
            sys.exit(f"Error (FILESERVER - receive): {e}")

        return chunks

    @classmethod
    def receive_file(cls, sock: socket.socket, request_message: str):
        # send
        cls.ask_for_file(sock, request_message)

        # receive header
        length = cls.receive_length(sock)

        # receive content
        return cls.receive_content(sock, length)

    @classmethod
    def download_structure(cls, server: tuple, file: str, hostname: str):
        """
        Receives the file from the server
        :param server: tuple(IP : str, PORT : int) - server address
        :param file: str - file name
        :param hostname: str - hostname of the serwer we are connecting to
        :return: None
        """
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(SOCKET_TIMEOUT)
        try:
            sock.connect(server)
        except socket.error as e:
            sys.exit(f"Error (FILESERVER): {e}")

        msg = f"GET {file} FSP/1.0\r\nHostname: {hostname}\r\nAgent: {AGENT}\r\n\r\n"
        chunks = cls.receive_file(sock, msg)
        with open(file, "wb") as f:
            for chunk in chunks:
                f.write(chunk)

        sock.close()

    @staticmethod
    def receive_header_line(sock: socket.socket):
        try:
            ret = ""
            while True:
                rcv = sock.recv(1).decode()
                if rcv == "\r":
                    sock.recv(1)
                    return ret
                ret += rcv
        except socket.timeout:
            sys.exit(f"Error (FILESERVER - receive header): Timeout of {SOCKET_TIMEOUT} seconds exceeded.")
        except socket.error as e:
            sys.exit(f"Error (FILESERVER - receive header): {e}")

    @staticmethod
    def resolve_server_ip(server: str, nameserver: tuple):
        """
        Resolves the server IP from the NS
        :arg server: str - server name to be translated
        :arg nameserver: tuple(IP : str, PORT : int) - name server address
        :return: A tuple representing the resolved target (IP : str, PORT : int) or None on error
        """
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(SOCKET_TIMEOUT)

        try:
            sock.sendto(f"WHEREIS {server}".encode(), nameserver)
            data = sock.recvfrom(1024)
        except socket.timeout:
            sys.exit(f"Error (NAMESERVER): Timeout of {SOCKET_TIMEOUT} seconds exceeded.")
        except socket.error as e:
            sys.exit(f"Error (NAMESERVER): {e}")

        sock.close()

        message = data[0].decode().split(" ", 1)
        if len(message) != 2 or message[0] != "OK":
            sys.exit(f"Error (NAMESERVER): Server response: {message[1]}.")

        target = message[1].split(":", 1)
        if len(target) != 2:
            return None

        try:
            ipaddress.ip_address(target[0])
        except ValueError:
            sys.exit("Error (NAMESERVER): response IP is invalid.")

        # convert port to int
        try:
            target = (target[0], int(target[1]))
        except ValueError:
            sys.exit("Error (NAMESERVER): response server port cannot be converted to an integer.")

        return target


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="IPK project 1 - simple FSP protocol")

    parser.add_argument("-n",
                        metavar="NAMESERVER",
                        dest="raw_arg_ns",
                        help="IP address and port of the name server",
                        type=str,
                        required=True)

    parser.add_argument("-f",
                        metavar="SURL",
                        dest="raw_arg_url",
                        help="URL of the file to download (the protocol must always be FSP)",
                        type=str,
                        required=True)

    fg = FileGet()
    args = parser.parse_args(namespace=fg)
    fg.run()
